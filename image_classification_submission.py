# -*- coding: utf-8 -*-
"""Image Classification Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Es1q9ULGWHnnKC_2EdmcSE0HvaWrc1ek

Import Necessary Library:
"""

!pip install split-folders
!pip install split-folders tqdm
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile,os
import splitfolders
import matplotlib.pyplot as plt

"""Import Dataset from Belajar Machine Learning untuk Pemula:"""

!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

local_file = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_file, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()
os.listdir('/tmp')

splitfolders.ratio('/tmp/rockpaperscissors/rps-cv-images', 
                   output="/tmp/rockpaperscissors/", 
                   seed=42, ratio=(.8, .2))

base_dir = '/tmp/rockpaperscissors/'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

"""Creating Directory for Training and Validation Data:"""

train_scissor_dir = os.path.join(train_dir, 'scissors')
train_paper_dir = os.path.join(train_dir, 'paper')
train_rock_dir = os.path.join(train_dir, 'rock')

validation_scissor_dir = os.path.join(validation_dir, 'scissors')
validation_paper_dir = os.path.join(validation_dir, 'paper')
validation_rock_dir = os.path.join(validation_dir, 'rock')

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
                      train_dir,
                      target_size=(150,150),
                      batch_size=4,
                      class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
                          validation_dir,
                          target_size=(150,150),
                          batch_size=4,
                          class_mode='categorical')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(8, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.90 and logs.get('val_accuracy')>0.90):
      print("\nThe accuracy of the training set and validation set has reached > 90%")
      self.model.stop_training = True
callbacks = myCallback()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

history = model.fit(
            train_generator,
            steps_per_epoch=25,  
            epochs=20,
            validation_data=validation_generator, 
            validation_steps=5, 
            callbacks=[callbacks], 
            verbose=2)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

"""Converting Model:"""

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)